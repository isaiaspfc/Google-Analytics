buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://jaspersoft.jfrog.io/jaspersoft/third-party-ce-artifacts/'
        }
    }
}

plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'eclipse'
    id 'com.github.gmazelier.jasperreports' version '0.4'
}

group = 'br.com.megasoftgyn'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
    maven {
        url "https://jaspersoft.jfrog.io/jaspersoft/third-party-ce-artifacts/"
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter:2.6.4'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.4'
	implementation 'com.google.api-client:google-api-client:1.33.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools:2.6.4'
	implementation 'org.springframework.boot:spring-boot-starter-web:2.6.4'
	implementation 'com.google.auth:google-auth-library-oauth2-http:0.6.1'
	implementation 'com.google.apis:google-api-services-analyticsreporting:v4-rev1-1.19.1'
	runtimeOnly 'org.postgresql:postgresql:42.3.3'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.4'
	implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.4'
    implementation group: 'org.springframework.boot', name:'spring-boot-starter-data-jpa'
    runtimeOnly    group: 'org.postgresql',           name: 'postgresql'
    implementation group: 'org.liquibase',            name: 'liquibase-core'
	implementation group: 'net.sf.jasperreports', name: 'jasperreports', version: '6.19.0'
    implementation group: 'net.sf.jasperreports', name: 'jasperreports-fonts', version: '6.0.0'
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    annotationProcessor group: 'org.hibernate',            name: 'hibernate-jpamodelgen',              version: '5.4.30.Final'
}
jasperreports {
    srcDir = file('src/main/resources')
    outDir = file('src/main/resources')
    useRelativeOutDir = true
}

compileJava.dependsOn ('compileAllReports')
	def JPA_MODELGEN_PATH='src/jpaModelgen/java'
    
	sourceSets {
    main {
        java {
            srcDir JPA_MODELGEN_PATH
        	}
    	}
	}

	task cleanJpaModelgen {
    doLast {
        	project.delete(JPA_MODELGEN_PATH)
    	}
	}

	tasks.withType(JavaCompile) {
    def jpaModelgenDir = file(JPA_MODELGEN_PATH)
    options.annotationProcessorGeneratedSourcesDirectory = jpaModelgenDir
    outputs.dir(jpaModelgenDir)
}
	clean.dependsOn ('cleanJpaModelgen')
	compileJava.dependsOn ('cleanJpaModelgen')

tasks.named('test') {
	useJUnitPlatform()
}
